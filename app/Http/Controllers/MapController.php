<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;

class MapController extends Controller
{
    public function getBoundary()
    {
        $polygon = [
            [107.49557588771728, -6.9151478909051605],
            [107.49775788266578, -6.919140461557902],
            [107.50028664980834, -6.918065009472727],
            [107.50319718123683, -6.91643014807363],
            [107.50582427927691, -6.919597929123697],
            [107.50620102582019, -6.919666824296215],
            [107.50650837168297, -6.9205919870700825],
            [107.50699625704135, -6.921121322134141],
            [107.50949468148491, -6.920806373661847],
            [107.51067969362407, -6.92161751227836],
            [107.51289060096917, -6.92116477425941],
            [107.51615661144137, -6.923008332840169],
            [107.51647507610221, -6.9252937672513895],
            [107.52444052578875, -6.922282831397084],
            [107.52114393500614, -6.917339721606368],
            [107.52118589430114, -6.916366843328731],
            [107.51731840244855, -6.9141617520207745],
            [107.51840843265074, -6.913086575777811],
            [107.52077917389863, -6.9112778455820205],
            [107.52099617913927, -6.910783157861474],
            [107.51640669197224, -6.907075041560631],
            [107.51122276590388, -6.903163335727427],
            [107.50323547030098, -6.906521289031318],
            [107.50288231265716, -6.907457603612329],
            [107.50321379870297, -6.908020223955788],
            [107.50291439195081, -6.9087633064029745],
            [107.50238152500799, -6.91151366822146],
            [107.49557588771728, -6.9151478909051605]
        ];

        return response()->json([
            'type' => 'FeatureCollection',
            'features' => [
                'type' => 'Feature',
                'geometry' => [
                    'type' => 'Polygon',
                    'coordinates' => [$polygon]
                ],
                'properties' => [
                    'name' => 'Desa Batujajar Timur', 
                ]
            ]
        ]);
    }

    public function getPOI(Request $request)
    {
        $amenity = $request->input('amenity', 'school');

        $polygon = [
            [107.49557588771728, -6.9151478909051605],
            [107.49775788266578, -6.919140461557902],
            [107.50028664980834, -6.918065009472727],
            [107.50319718123683, -6.91643014807363],
            [107.50582427927691, -6.919597929123697],
            [107.50620102582019, -6.919666824296215],
            [107.50650837168297, -6.9205919870700825],
            [107.50699625704135, -6.921121322134141],
            [107.50949468148491, -6.920806373661847],
            [107.51067969362407, -6.92161751227836],
            [107.51289060096917, -6.92116477425941],
            [107.51615661144137, -6.923008332840169],
            [107.51647507610221, -6.9252937672513895],
            [107.52444052578875, -6.922282831397084],
            [107.52114393500614, -6.917339721606368],
            [107.52118589430114, -6.916366843328731],
            [107.51731840244855, -6.9141617520207745],
            [107.51840843265074, -6.913086575777811],
            [107.52077917389863, -6.9112778455820205],
            [107.52099617913927, -6.910783157861474],
            [107.51640669197224, -6.907075041560631],
            [107.51122276590388, -6.903163335727427],
            [107.50323547030098, -6.906521289031318],
            [107.50288231265716, -6.907457603612329],
            [107.50321379870297, -6.908020223955788],
            [107.50291439195081, -6.9087633064029745],
            [107.50238152500799, -6.91151366822146],
            [107.49557588771728, -6.9151478909051605]
        ];

        $bbox = '107.48,-6.93,107.53,-6.90';
        $query = <<<OVERPASS
            [out:json][timeout:25];
            (
            node["amenity"="$amenity"]($bbox);
            way["amenity"="$amenity"]($bbox);
            relation["amenity"="$amenity"]($bbox);
            );
            out center;
            OVERPASS;

        $response = Http::timeout(20)->asForm()->post('https://overpass-api.de/api/interpreter', [
            'data' => $query
        ]);

        if (!$response->successful()) {
            return response()->json(['error' => 'Gagal mengambil POI'], 500);
        }

        $elements = $response->json('elements');
        $poiInArea = [];

        foreach ($elements as $el) {
            $lat = $el['lat'] ?? ($el['center']['lat'] ?? null);
            $lon = $el['lon'] ?? ($el['center']['lon'] ?? null);

            if (!$lat || !$lon) continue;

            if ($this->pointInPolygon([$lon, $lat], $polygon)) {
                $poiInArea[] = [
                    'name' => $el['tags']['name'] ?? 'Tanpa Nama',
                    'lat' => $lat,
                    'lon' => $lon,
                    'tags' => $el['tags'] ?? [],
                ];
            }
        }

        return response()->json($poiInArea);
    }

    private function pointInPolygon($point, $polygon)
    {
        $x = $point[0];
        $y = $point[1];
        $inside = false;
        $n = count($polygon);

        for ($i = 0, $j = $n - 1; $i < $n; $j = $i++) {
            $xi = $polygon[$i][0]; $yi = $polygon[$i][1];
            $xj = $polygon[$j][0]; $yj = $polygon[$j][1];

            $intersect = (($yi > $y) != ($yj > $y))
                && ($x < ($xj - $xi) * ($y - $yi) / (($yj - $yi) ?: 1e-10) + $xi);

            if ($intersect) $inside = !$inside;
        }

        return $inside;
    }
}
